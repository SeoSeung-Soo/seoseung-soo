services:
  django:
    container_name: django
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    command: >
      /bin/sh -c "
        uv run manage.py collectstatic --noinput &&
        uv run manage.py migrate &&
        uv run gunicorn --bind 0.0.0.0:8000 config.wsgi:application
      "
    healthcheck:
      test: ["CMD", "/app/.venv/bin/python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 8000)); s.close()"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ss_networks

  db:
    container_name: postgres
    image: postgres:15
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ss_networks

  openresty:
    image: openresty/openresty:alpine-apk
    container_name: openresty
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.dev.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ./static:/app/staticfiles
      - ./media:/app/media
    networks:
      - ss_networks
    depends_on:
      django:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume:
networks:
  ss_networks:
    driver: bridge